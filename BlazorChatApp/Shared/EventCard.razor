@using System.Text.Json
@inject NavigationManager Nav

<div class="event-card @AppEvent.Type.ToString().ToLower() @(IsClosed ? "event-closed" : "")">
    <div class="event-header">
        <span class="event-icon">@GetIcon(AppEvent.Type)</span>
        <span class="event-type">@AppEvent.Type</span>
        <span class="event-state badge">@AppEvent.State</span>
    </div>

    <div class="event-meta">
        <span><strong>From:</strong> @AppEvent.Sender</span>
        <span><strong>At:</strong> @AppEvent.Timestamp.ToString("g")</span>
    </div>

    @if (!string.IsNullOrWhiteSpace(AppEvent.ForwardedTo))
    {
        <div class="event-meta forwarded">
            🔁 <strong>Forwarded To:</strong> @AppEvent.ForwardedTo
        </div>
    }

    <div class="event-message">
        @RenderDetails()
    </div>

    @if (ShowEdit && !IsClosed)
    {
        <div class="event-actions">
            <button class="btn-small" @onclick="@(() => EditEvent(AppEvent.Id))">✏️ Edit</button>
        </div>
    }
</div>

@code {
    [Parameter] public AppEvent AppEvent { get; set; } = default!;
    [Parameter] public bool ShowEdit { get; set; } = false;

    private bool IsClosed => AppEvent.State == EventState.Closed;

    private MarkupString RenderDetails()
    {
        try
        {
            var json = JsonDocument.Parse(AppEvent.JsonData);
            var html = "";

            if (AppEvent.Type == EventType.Message && json.RootElement.TryGetProperty("Description", out var msg))
                html = $"💬 {msg.GetString()}";

            else if (AppEvent.Type == EventType.Incident)
                html = $"🚧 <strong>{json.RootElement.GetProperty("Severity").GetString()}</strong>: {json.RootElement.GetProperty("Description").GetString()}";

            else if (AppEvent.Type == EventType.Alarm)
                html = $"🚨 <strong>{json.RootElement.GetProperty("AlarmType").GetString()}</strong>: {json.RootElement.GetProperty("Description").GetString()}";

            return new MarkupString(html);
        }
        catch
        {
            return (MarkupString)$"⚠️ Could not parse event details.";
        }
    }

    private void EditEvent(int eventId)
    {
        Nav.NavigateTo($"/event/edit/{eventId}");
    }

    private string GetIcon(EventType type) => type switch
    {
        EventType.Message => "💬",
        EventType.Incident => "🚧",
        EventType.Alarm => "🚨",
        _ => "📄"
    };


}
