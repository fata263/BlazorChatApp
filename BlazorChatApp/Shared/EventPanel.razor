@inject SignalRService SignalR

<div class="event-panel-container">
    <div class="event-group alarm-group">
        <div class="event-group-header">🚨 Alarms</div>
        <div class="event-scroll">
            @if (Alarms.Count == 0)
            {
                <p class="empty-text">No alarms.</p>
            }
            else
            {
                @foreach (var evt in Alarms)
                {
                    <EventCard AppEvent="evt" ShowEdit="true" />
                }
            }
        </div>
    </div>

    <div class="event-group incident-group">
        <div class="event-group-header">🚧 Incidents</div>
        <div class="event-scroll">
            @if (Incidents.Count == 0)
            {
                <p class="empty-text">No incidents.</p>
            }
            else
            {
                @foreach (var evt in Incidents)
                {
                    <EventCard AppEvent="evt" ShowEdit="true" />
                }
            }
        </div>
    </div>

    <div class="event-group message-group">
        <div class="event-group-header">💬 Messages</div>
        <div class="event-scroll">
            @if (Messages.Count == 0)
            {
                <p class="empty-text">No messages.</p>
            }
            else
            {
                @foreach (var evt in Messages)
                {
                    <EventCard AppEvent="evt" ShowEdit="true" />
                }
            }
        </div>
    </div>
</div>

@code {
    public List<AppEvent> IncomingEvents { get; set; } = new();

    private List<AppEvent> Alarms => IncomingEvents
        .Where(e => e.Type == EventType.Alarm)
        .OrderByDescending(e => e.Timestamp)
        .ToList();

    private List<AppEvent> Incidents => IncomingEvents
        .Where(e => e.Type == EventType.Incident)
        .OrderByDescending(e => e.Timestamp)
        .ToList();

    private List<AppEvent> Messages => IncomingEvents
        .Where(e => e.Type == EventType.Message)
        .OrderByDescending(e => e.Timestamp)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        SignalR.OnEventReceived += async _ => await InvokeAsync(StateHasChanged);
        SignalR.OnEventUpdated += async _ => await InvokeAsync(StateHasChanged);

        var recentEvents = await SignalR.LoadRecentEventsAsync();

        if (recentEvents != null)
            IncomingEvents = recentEvents;

        await InvokeAsync(StateHasChanged);
    }
}
