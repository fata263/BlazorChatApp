@page "/register"
@using System.Net.Http.Json
@using BlazorChatApp.Shared
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Nav
@layout MinimalLayout

<div class="auth-form">
<h3>Create New User</h3>

<EditForm Model="_newUser" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>Username:</label>
    <InputText @bind-Value="_newUser.Username" class="form-control" />

    <label>Password:</label>
    <InputText @bind-Value="_newUser.Password" class="form-control" type="password" />

    <label>First Name:</label>
    <InputText @bind-Value="_newUser.FirstName" class="form-control" />

    <label>Last Name:</label>
    <InputText @bind-Value="_newUser.LastName" class="form-control" />

    <label>Role:</label>
    <InputSelect @bind-Value="_newUser.Role" class="form-control">
        @foreach (var role in Enum.GetValues(typeof(UserRole)).Cast<UserRole>())
        {
            <option value="@role">@role</option>
        }
    </InputSelect>

    <label>Supervisor:</label>
    <InputSelect @bind-Value="_newUser.SupervisorId" class="form-control">
        <option value="">(None)</option>
        @foreach (var sup in AvailableSupervisors)
        {
            <option value="@sup.Id">@sup.FirstName @sup.LastName (@sup.Role)</option>
        }
    </InputSelect>

    <button class="btn btn-primary mt-2" type="submit">Register</button>
</EditForm>

</div>

@code {
    private AppUser _newUser = new();
    private List<AppUser> AvailableSupervisors = new();
    private UserRole _lastRole;

    protected override async Task OnInitializedAsync()
    {
        await LoadSupervisors();
        _lastRole = _newUser.Role;
        FilterSupervisors();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_lastRole != _newUser.Role)
        {
            _lastRole = _newUser.Role;
            FilterSupervisors();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadSupervisors()
    {
        var allUsers = await Http.GetFromJsonAsync<List<AppUser>>("api/users");
        AvailableSupervisors = allUsers ?? new List<AppUser>();
    }

    private void FilterSupervisors()
    {
        var higherRoles = Enum.GetValues(typeof(UserRole))
            .Cast<UserRole>()
            .Where(r => r > _newUser.Role && r != UserRole.Manager)
            .ToList();

        AvailableSupervisors = AvailableSupervisors
            .Where(u => higherRoles.Contains(u.Role))
            .ToList();
    }

    private async Task RegisterUser()
    {
        var result = await Http.PostAsJsonAsync("api/users/register", _newUser);
        if (result.IsSuccessStatusCode)
        {
            Nav.NavigateTo("/login");
        }
    }
}
