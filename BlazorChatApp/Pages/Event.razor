@page "/event"
@using System.Text.Json
@using BlazorChatApp.services
@using Microsoft.JSInterop
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject SignalRService SignalR
@inject AppStatusService StatusService
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components


<h3>📝 Create and Send Event</h3>

@if (!initialized)
{
    <p class="text-muted">🔄 Loading session...</p>
}
else
{
    <EditForm Model="Form" OnValidSubmit="SendEvent" class="event-form">
    <h3>🚨 Create and Send Event</h3>

    <div class="form-group">
        <label>Event Type:</label>
        <InputSelect @bind-Value="Form.Type">
            @foreach (var val in Enum.GetValues(typeof(EventType)))
            {
                <option value="@val">@val</option>
            }
        </InputSelect>
    </div>

    <div class="form-group mt-2">
        <label>Scope:</label>
        <InputSelect @bind-Value="Form.Scope">
            @foreach (var scope in Enum.GetValues(typeof(EventScope)))
            {
                <option value="@scope">@scope</option>
            }
        </InputSelect>
    </div>

    @if (Form.Scope == EventScope.Private)
    {
        <div class="form-group mt-2">
            <label>Forward To (Username):</label>
            <InputText @bind-Value="Form.ForwardedTo" />
        </div>
    }

    @if (Form.Type == EventType.Message)
    {
        <div class="form-group mt-3">
            <label>Message:</label>
            <InputTextArea @bind-Value="Form.MessageContent" />
        </div>
    }
    else if (Form.Type == EventType.Incident)
    {
        <div class="form-group mt-3">
            <label>Severity:</label>
            <InputSelect @bind-Value="Form.IncidentSeverity">
                <option>Low</option>
                <option>Medium</option>
                <option>High</option>
            </InputSelect>

            <label class="mt-2">Description:</label>
            <InputTextArea @bind-Value="Form.IncidentDescription" />
        </div>
    }
    else if (Form.Type == EventType.Alarm)
    {
        <div class="form-group mt-3">
            <label>Alarm Type:</label>
            <InputSelect @bind-Value="Form.AlarmType">
                <option>Fire</option>
                <option>Security</option>
                <option>System</option>
            </InputSelect>

            <label class="mt-2">Description:</label>
            <InputTextArea @bind-Value="Form.AlarmDescription" />
        </div>
    }

    <div class="mt-4 d-flex justify-content-between">
        <button type="submit" class="btn-send">✅ Send Event</button>
        <button type="button" class="btn-nav" @onclick="GoToChat">← Back to Chat</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(SuccessMessage))
    {
        <div class="alert alert-success mt-3">@SuccessMessage</div>
    }
</EditForm>

}

@code {
    private bool initialized = false;
    private string Username = "";
    private int StationId = 0;
    private string SuccessMessage = "";

    private EventFormModel Form = new();

    private class EventFormModel
    {
        public EventType Type { get; set; } = EventType.Message;
        public EventScope Scope { get; set; } = EventScope.All;
        public string ForwardedTo { get; set; } = "";
        public string MessageContent { get; set; } = "";
        public string IncidentSeverity { get; set; } = "Low";
        public string IncidentDescription { get; set; } = "";
        public string AlarmType { get; set; } = "Fire";
        public string AlarmDescription { get; set; } = "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || initialized) return;

        try
        {
            Username = await JS.InvokeAsync<string>("sessionStorage.getItem", "username") ?? "";
            var stationIdStr = await JS.InvokeAsync<string>("sessionStorage.getItem", "stationId") ?? "0";
            StationId = int.TryParse(stationIdStr, out var id) ? id : 0;

            if (string.IsNullOrWhiteSpace(Username) || StationId == 0)
            {
                Nav.NavigateTo("/login", true);
                return;
            }

            await SignalR.StartAsync(Nav.BaseUri, Username, StationId);
            initialized = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusService.ReportError("Session Load", ex.Message);
        }
    }

    private async Task SendEvent()
    {
        try
        {
            string jsonData = "{}";

            if (Form.Type == EventType.Message)
                jsonData = JsonSerializer.Serialize(new { Description = Form.MessageContent });

            else if (Form.Type == EventType.Incident)
                jsonData = JsonSerializer.Serialize(new { Severity = Form.IncidentSeverity, Description = Form.IncidentDescription });

            else if (Form.Type == EventType.Alarm)
                jsonData = JsonSerializer.Serialize(new { AlarmType = Form.AlarmType, Description = Form.AlarmDescription });

            var evt = new AppEvent
            {
                Sender = Username,
                StationId = StationId,
                Type = Form.Type,
                Scope = Form.Scope,
                State = EventState.New,
                JsonData = jsonData,
                ForwardedTo = Form.Scope == EventScope.Private ? Form.ForwardedTo : null,
                Timestamp = DateTime.UtcNow
            };

            await SignalR.SendEvent(evt, Form.ForwardedTo, Form.Scope.ToString());
            SuccessMessage = "✅ Event sent successfully.";
        }
        catch (Exception ex)
        {
            StatusService.ReportError("SendEvent", ex.Message);
        }
    }

    private void GoToChat()
    {
        Nav.NavigateTo($"/chat");
    }
}
