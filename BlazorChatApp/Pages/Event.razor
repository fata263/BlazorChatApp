@page "/event"
@using System.Text.Json
@using BlazorChatApp.services
@using Microsoft.JSInterop
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject SignalRService SignalR
@inject AppStatusService StatusService

<h3>📝 Create and Send Event</h3>

@if (!initialized)
{
    <p class="text-muted">🔄 Loading session...</p>
}
else
{
    <EditForm OnValidSubmit="SendEvent">
        <div class="form-group">
            <label>Event Type:</label>
            <InputSelect @bind="Type" class="form-control">
                @foreach (var val in Enum.GetValues(typeof(EventType)))
                {
                    <option value="@val">@val</option>
                }
            </InputSelect>
        </div>

        <div class="form-group mt-2">
            <label>Scope:</label>
            <InputSelect @bind="Scope" class="form-control">
                @foreach (var scope in Enum.GetValues(typeof(EventScope)))
                {
                    <option value="@scope">@scope</option>
                }
            </InputSelect>
        </div>

        @if (Scope == EventScope.Private)
        {
            <div class="form-group mt-2">
                <label>Forward To (Username):</label>
                <InputText class="form-control" @bind="ForwardedTo" />
            </div>
        }

        <!-- Dynamic Fields -->
        @if (Type == EventType.Message)
        {
            <div class="form-group mt-3">
                <label>Message:</label>
                <InputTextArea class="form-control" @bind="MessageContent" />
            </div>
        }
        else if (Type == EventType.Incident)
        {
            <div class="form-group mt-3">
                <label>Severity:</label>
                <InputSelect @bind="IncidentSeverity" class="form-control">
                    <option>Low</option>
                    <option>Medium</option>
                    <option>High</option>
                </InputSelect>
                <label class="mt-2">Description:</label>
                <InputTextArea class="form-control" @bind="IncidentDescription" />
            </div>
        }
        else if (Type == EventType.Alarm)
        {
            <div class="form-group mt-3">
                <label>Alarm Type:</label>
                <InputSelect @bind="AlarmType" class="form-control">
                    <option>Fire</option>
                    <option>Security</option>
                    <option>System</option>
                </InputSelect>
                <label class="mt-2">Description:</label>
                <InputTextArea class="form-control" @bind="AlarmDescription" />
            </div>
        }

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">✅ Send Event</button>
            <button type="button" class="btn btn-secondary ms-3" @onclick="GoToChat">← Back to Chat</button>
        </div>

        @if (!string.IsNullOrWhiteSpace(SuccessMessage))
        {
            <div class="alert alert-success mt-3">@SuccessMessage</div>
        }
    </EditForm>
}

@code {
    private bool initialized = false;
    private string Username = "";
    private int StationId = 0;

    private EventType Type = EventType.Message;
    private EventScope Scope = EventScope.All;
    private EventState State = EventState.New;

    private string ForwardedTo = "";
    private string JsonData = "{}";
    private string MessageContent = "";
    private string IncidentSeverity = "Low";
    private string IncidentDescription = "";
    private string AlarmType = "Fire";
    private string AlarmDescription = "";

    private string SuccessMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || initialized) return;

        try
        {
            Username = await JS.InvokeAsync<string>("sessionStorage.getItem", "username") ?? "";
            var stationIdStr = await JS.InvokeAsync<string>("sessionStorage.getItem", "stationId") ?? "0";
            StationId = int.TryParse(stationIdStr, out var id) ? id : 0;

            if (string.IsNullOrWhiteSpace(Username) || StationId == 0)
            {
                Nav.NavigateTo("/login", true);
                return;
            }

            await SignalR.StartAsync(Nav.BaseUri, Username, StationId);
            initialized = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            StatusService.ReportError("Session Load", ex.Message);
        }
    }

    private async Task SendEvent()
    {
        try
        {
            object? details = null;

            if (Type == EventType.Message)
            {
                details = new { Description = MessageContent };
            }
            else if (Type == EventType.Incident)
            {
                details = new { Severity = IncidentSeverity, Description = IncidentDescription };
            }
            else if (Type == EventType.Alarm)
            {
                details = new { AlarmType = AlarmType, Description = AlarmDescription };
            }

            JsonData = JsonSerializer.Serialize(details ?? new { });

            var evt = new AppEvent
            {
                Sender = Username,
                StationId = StationId,
                Type = Type,
                Scope = Scope,
                State = State,
                JsonData = JsonData,
                ForwardedTo = Scope == EventScope.Private ? ForwardedTo : null,
                Timestamp = DateTime.UtcNow
            };

            await SignalR.SendEvent(evt);
            SuccessMessage = "✅ Event sent successfully.";
        }
        catch (Exception ex)
        {
            StatusService.ReportError("SendEvent", ex.Message);
        }
    }

    
    private void GoToChat()
    {
        Nav.NavigateTo($"/chat");
    }
}
