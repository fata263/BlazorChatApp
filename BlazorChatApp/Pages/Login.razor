@page "/"
@page "/login"
@using System.Net.Http.Json
@using BlazorChatApp.services
@using Microsoft.JSInterop
@inject NavigationManager Nav
@inject HttpClient Http
@inject IJSRuntime JS
@inject UserService UserService
@inject AppStatusService StatusService

<h3>🔐 Login</h3>

@if (Stations == null)
{
    <p>Loading stations...</p>
}
else
{
    <div class="auth-form">
        <select @bind="SelectedStationId" class="form-control">
            @foreach (var s in Stations)
            {
                <option value="@s.Id">@s.Name</option>
            }
        </select>

        <input @bind="UserName" class="form-control mt-2" placeholder="Username" />
        <input @bind="Password" class="form-control mt-2" type="password" placeholder="Password" />

        <button class="btn btn-primary mt-3" @onclick="UserLogin">Join Chat</button>
        <button class="btn btn-secondary mt-2" @onclick="RegisterUser">New User? Register</button>
    </div>
}

@code {
    private List<Station>? Stations;
    private int SelectedStationId;
    private string UserName = "";
    private string Password = "";

    protected override async Task OnInitializedAsync()
    {
        Stations = await Http.GetFromJsonAsync<List<Station>>("api/stations");
        if (Stations?.Any() == true)
            SelectedStationId = Stations.First().Id;
    }

    private async Task UserLogin()
    {
        var request = new LoginRequest { Username = UserName, Password = Password };
        var response = await Http.PostAsJsonAsync("api/users/login", request);

        if (response.IsSuccessStatusCode)
        {
            var loggedInUser = await response.Content.ReadFromJsonAsync<AppUser>();
            var selected = Stations?.FirstOrDefault(s => s.Id == SelectedStationId);
            if (loggedInUser == null || selected == null) return;

            await JS.InvokeVoidAsync("sessionStorage.setItem", "username", loggedInUser.Username);
            await JS.InvokeVoidAsync("sessionStorage.setItem", "stationId", selected.Id.ToString());
            await JS.InvokeVoidAsync("sessionStorage.setItem", "stationName", selected.Name);

            UserService.SetUser(loggedInUser);
            UserService.SetStationName(selected.Name);

            Nav.NavigateTo("/chat", true);
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            StatusService.ReportError($"Login failed: {error}");
        }
    }

    private void RegisterUser()
    {
        Nav.NavigateTo("/register");
    }
}
